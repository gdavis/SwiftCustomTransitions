<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>$ct6</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>ClassImplementation</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>func animateIn(transitionContext: UIViewControllerContextTransitioning)
{
    let duration = self.transitionDuration(transitionContext)
    let containerView = transitionContext.containerView()
    let popupViewController = transitionContext.viewControllerForKey(UITransitionContextToViewControllerKey)!
    let popupView = popupViewController.view
    let popupSize = popupViewController.preferredContentSize
    
    let scaleValues: [NSValue] = [
        NSValue(CATransform3D: CATransform3DScale(CATransform3DMakeTranslation(0, -500, 0), 0, 0, 1)),
        NSValue(CATransform3D: CATransform3DTranslate(CATransform3DMakeScale(1.2, 0.75, 1), 0, 200, 0)),
        NSValue(CATransform3D: CATransform3DTranslate(CATransform3DMakeScale(0.8, 1.3, 1), 0, -55, 0)),
        NSValue(CATransform3D: CATransform3DIdentity)
    ]
    
    let transformAnimation = CAKeyframeAnimation(keyPath: "transform")
    transformAnimation.duration = duration * 0.7
    transformAnimation.values = scaleValues
    transformAnimation.keyTimes = [0, 0.3, 0.6, 1]
    transformAnimation.fillMode = kCAFillModeBoth
    transformAnimation.timingFunctions = [
        CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut),
        CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut),
        CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut),
    ]
    transformAnimation.completionBlock = { (finished: Bool) -&gt; Void in
        
        transitionContext.completeTransition(finished)
    }
    
    let dimmerFadeAnimation = CABasicAnimation(keyPath: "opacity")
    dimmerFadeAnimation.fromValue = 0
    dimmerFadeAnimation.toValue = 1
    dimmerFadeAnimation.duration = duration * 0.3
    dimmerFadeAnimation.fillMode = kCAFillModeBoth
    dimmerFadeAnimation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
    dimmerFadeAnimation.completionBlock = { (finished: Bool) -&gt; Void in
        if finished {
            containerView.addSubview(popupView)
            
            // set the layer to its final value before adding the animation
            popupView.layer.transform = CATransform3DIdentity
            
            popupView.layer.addAnimation(transformAnimation, forKey: "transformAnimation")
        }
        else {
            transitionContext.completeTransition(finished)
        }
    }
    
    popupView.frame = CGRect(origin: CGPointZero, size: popupSize)
    popupView.center = containerView.center
    
    // display the dimmer
    containerView.addSubview(self.dimmerView)
    self.dimmerView.frame = containerView.bounds
    
    
    // set the layer to its final value before adding the animation
    self.dimmerView.layer.opacity = 1
    self.dimmerView.layer.addAnimation(dimmerFadeAnimation, forKey: "dimmerFadeAnimation")
}


func animateOut(transitionContext: UIViewControllerContextTransitioning)
{
    let duration = self.transitionDuration(transitionContext)
    let popupViewController = transitionContext.viewControllerForKey(UITransitionContextFromViewControllerKey)!
    let popupView = popupViewController.view
    
    let dimmerFadeAnimation = CABasicAnimation(keyPath: "opacity")
    dimmerFadeAnimation.fromValue = 1
    dimmerFadeAnimation.toValue = 0
    dimmerFadeAnimation.duration = duration * 0.4
    dimmerFadeAnimation.fillMode = kCAFillModeBoth
    dimmerFadeAnimation.timingFunction = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
    dimmerFadeAnimation.completionBlock = { (finished: Bool) -&gt; Void in
        transitionContext.completeTransition(finished)
    }
    
    let scaleValues: [NSValue] = [
        NSValue(CATransform3D: CATransform3DIdentity),
        NSValue(CATransform3D: CATransform3DTranslate(CATransform3DMakeScale(1.2, 0.9, 1), 0, -100, 0)),
        NSValue(CATransform3D: CATransform3DScale(CATransform3DMakeTranslation(0, 500, 0), 0, 0.5, 1)),
    ]
    
    let transformAnimation = CAKeyframeAnimation(keyPath: "transform")
    transformAnimation.duration = duration * 0.6
    transformAnimation.values = scaleValues
    transformAnimation.keyTimes = [0, 0.7, 1]
    transformAnimation.fillMode = kCAFillModeBoth
    transformAnimation.timingFunctions = [
        CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut),
        CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseIn),
    ]
    transformAnimation.completionBlock = { (finished: Bool) -&gt; Void in
        if finished {
            self.dimmerView.layer.opacity = 0
            self.dimmerView.layer.addAnimation(dimmerFadeAnimation, forKey: "fadeAnimation")
        }
        else {
            transitionContext.completeTransition(finished)
        }
    }
    
    // its important to set the layer to its final values when adding the animation, without this,
    // you can get a flicker showing the original values when the animation ends.
    popupView.layer.transform = scaleValues.last!.CATransform3DValue
    popupView.layer.addAnimation(transformAnimation, forKey: "transformAnimation")
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>0348AA2A-9D49-41EA-9FFB-4E2558E4A6ED</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>6</string>
	<key>IDECodeSnippetTitle</key>
	<string>Custom Transition - 6 - Popup Animation Methods</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
